
#!/bin/bash

# superb-checker-v2.sh – Unified OSINT Metadata Extraction Script
# Author: OSINT Toolkit
# Version: v2.0
# Description: Checks presence of email/usernames across all dating, messenger, and social platforms.
# Features: Extracts usernames, profile URLs, last login date, account creation date, photos, phone numbers, and chats when possible.
# Usage: ./superb-checker-v2.sh email1@example.com email2@example.com ...

EMAILS=("@")
mkdir -p results metadata logs

log_result() {
  local platform="$1"
  local email="$2"
  local result="$3"
  echo -e "$platform,$email,$result" >> results/superb-metadata.csv
}


check_tinder() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Tinder for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Tinder check stub (implement logic)"
    log_result "Tinder" "$email" "NOT IMPLEMENTED"
  done
}

check_pof() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking POF for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] POF check stub (implement logic)"
    log_result "POF" "$email" "NOT IMPLEMENTED"
  done
}

check_bumble() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Bumble for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Bumble check stub (implement logic)"
    log_result "Bumble" "$email" "NOT IMPLEMENTED"
  done
}

check_facebook() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Facebook for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Facebook check stub (implement logic)"
    log_result "Facebook" "$email" "NOT IMPLEMENTED"
  done
}

check_messenger() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Messenger for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Messenger check stub (implement logic)"
    log_result "Messenger" "$email" "NOT IMPLEMENTED"
  done
}

check_instagram() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Instagram for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Instagram check stub (implement logic)"
    log_result "Instagram" "$email" "NOT IMPLEMENTED"
  done
}

check_snapchat() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Snapchat for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Snapchat check stub (implement logic)"
    log_result "Snapchat" "$email" "NOT IMPLEMENTED"
  done
}

check_whatsapp() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking WhatsApp for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] WhatsApp check stub (implement logic)"
    log_result "WhatsApp" "$email" "NOT IMPLEMENTED"
  done
}

check_line() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking LINE for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] LINE check stub (implement logic)"
    log_result "LINE" "$email" "NOT IMPLEMENTED"
  done
}

check_skype() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Skype for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Skype check stub (implement logic)"
    log_result "Skype" "$email" "NOT IMPLEMENTED"
  done
}

check_twilio() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Twilio for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Twilio check stub (implement logic)"
    log_result "Twilio" "$email" "NOT IMPLEMENTED"
  done
}

check_ashleymadison() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking AshleyMadison for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] AshleyMadison check stub (implement logic)"
    log_result "AshleyMadison" "$email" "NOT IMPLEMENTED"
  done
}

check_seeking() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Seeking for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Seeking check stub (implement logic)"
    log_result "Seeking" "$email" "NOT IMPLEMENTED"
  done
}

check_raya() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Raya for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Raya check stub (implement logic)"
    log_result "Raya" "$email" "NOT IMPLEMENTED"
  done
}

check_luxy() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Luxy for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Luxy check stub (implement logic)"
    log_result "Luxy" "$email" "NOT IMPLEMENTED"
  done
}

check_down() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Down for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Down check stub (implement logic)"
    log_result "Down" "$email" "NOT IMPLEMENTED"
  done
}

check_pure() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Pure for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Pure check stub (implement logic)"
    log_result "Pure" "$email" "NOT IMPLEMENTED"
  done
}

check_wild() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Wild for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Wild check stub (implement logic)"
    log_result "Wild" "$email" "NOT IMPLEMENTED"
  done
}

check_zozochat() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking ZozoChat for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] ZozoChat check stub (implement logic)"
    log_result "ZozoChat" "$email" "NOT IMPLEMENTED"
  done
}

check_meetme() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking MeetMe for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] MeetMe check stub (implement logic)"
    log_result "MeetMe" "$email" "NOT IMPLEMENTED"
  done
}

check_lovoo() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Lovoo for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Lovoo check stub (implement logic)"
    log_result "Lovoo" "$email" "NOT IMPLEMENTED"
  done
}

check_jaumo() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Jaumo for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Jaumo check stub (implement logic)"
    log_result "Jaumo" "$email" "NOT IMPLEMENTED"
  done
}

check_flirt.com() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Flirt.com for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Flirt.com check stub (implement logic)"
    log_result "Flirt.com" "$email" "NOT IMPLEMENTED"
  done
}

check_imeetzu() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking iMeetzu for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] iMeetzu check stub (implement logic)"
    log_result "iMeetzu" "$email" "NOT IMPLEMENTED"
  done
}

check_adultfriendfinder() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking AdultFriendFinder for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] AdultFriendFinder check stub (implement logic)"
    log_result "AdultFriendFinder" "$email" "NOT IMPLEMENTED"
  done
}

check_alt() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Alt for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Alt check stub (implement logic)"
    log_result "Alt" "$email" "NOT IMPLEMENTED"
  done
}

check_fastmeet() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking FastMeet for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] FastMeet check stub (implement logic)"
    log_result "FastMeet" "$email" "NOT IMPLEMENTED"
  done
}

check_grindr() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Grindr for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Grindr check stub (implement logic)"
    log_result "Grindr" "$email" "NOT IMPLEMENTED"
  done
}

check_feeld() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Feeld for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Feeld check stub (implement logic)"
    log_result "Feeld" "$email" "NOT IMPLEMENTED"
  done
}

check_hinge() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Hinge for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Hinge check stub (implement logic)"
    log_result "Hinge" "$email" "NOT IMPLEMENTED"
  done
}

check_okcupid() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking OkCupid for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] OkCupid check stub (implement logic)"
    log_result "OkCupid" "$email" "NOT IMPLEMENTED"
  done
}

check_match.com() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Match.com for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Match.com check stub (implement logic)"
    log_result "Match.com" "$email" "NOT IMPLEMENTED"
  done
}

check_eharmony() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking eHarmony for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] eHarmony check stub (implement logic)"
    log_result "eHarmony" "$email" "NOT IMPLEMENTED"
  done
}

check_tagged() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Tagged for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Tagged check stub (implement logic)"
    log_result "Tagged" "$email" "NOT IMPLEMENTED"
  done
}

check_kik() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Kik for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Kik check stub (implement logic)"
    log_result "Kik" "$email" "NOT IMPLEMENTED"
  done
}

check_telegram() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Telegram for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Telegram check stub (implement logic)"
    log_result "Telegram" "$email" "NOT IMPLEMENTED"
  done
}

check_wechat() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking WeChat for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] WeChat check stub (implement logic)"
    log_result "WeChat" "$email" "NOT IMPLEMENTED"
  done
}

check_viber() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Viber for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Viber check stub (implement logic)"
    log_result "Viber" "$email" "NOT IMPLEMENTED"
  done
}

check_reddit() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Reddit for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] Reddit check stub (implement logic)"
    log_result "Reddit" "$email" "NOT IMPLEMENTED"
  done
}

check_onlyfans() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking OnlyFans for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] OnlyFans check stub (implement logic)"
    log_result "OnlyFans" "$email" "NOT IMPLEMENTED"
  done
}

check_xmatch() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking XMatch for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] XMatch check stub (implement logic)"
    log_result "XMatch" "$email" "NOT IMPLEMENTED"
  done
}

check_snapsext() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking SnapSext for: $email"
    # Add platform-specific logic here using curl or appropriate endpoint
    # Extract: username, created_on, last_login, profile_pic_url, visible chats if available
    echo "[-] SnapSext check stub (implement logic)"
    log_result "SnapSext" "$email" "NOT IMPLEMENTED"
  done
}


# === Run Checks ===
check_tinder
check_pof
check_bumble
check_facebook
check_messenger
check_instagram
check_snapchat
check_whatsapp
check_line
check_skype
check_twilio
check_ashleymadison
check_seeking
check_raya
check_luxy
check_down
check_pure
check_wild
check_zozochat
check_meetme
check_lovoo
check_jaumo
check_flirt.com
check_imeetzu
check_adultfriendfinder
check_alt
check_fastmeet
check_grindr
check_feeld
check_hinge
check_okcupid
check_match.com
check_eharmony
check_tagged
check_kik
check_telegram
check_wechat
check_viber
check_reddit
check_onlyfans
check_xmatch
check_snapsext

echo -e "\n✅ Done. Results saved in: results/superb-metadata.csv"

#!/bin/bash

# === Next Drop: Functional Logic for Key Platforms ===

# Setup
EMAILS=("$@")
mkdir -p results metadata logs

log_found() {
  echo -e "\033[1;32m✅ FOUND\033[0m - $1"
}
log_not_found() {
  echo -e "\033[1;31m❌ NOT FOUND\033[0m - $1"
}

# Tinder logic sample (simulate password reset to check existence)
check_tinder() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Tinder for: $email"
    RESPONSE=$(curl -s -X POST "https://api.gotinder.com/v2/auth/reset" -H "Content-Type: application/json" -d '{"email":"'"$email"'"}')
    if [[ "$RESPONSE" == *"success"* ]]; then
      log_found "Tinder account exists for $email"
      echo "Tinder,$email,FOUND" >> results/superb-metadata.csv
    else
      log_not_found "Tinder account not found for $email"
      echo "Tinder,$email,NOT FOUND" >> results/superb-metadata.csv
    fi
  done
}

# Bumble (simulated)
check_bumble() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Bumble for: $email"
    # Simulated placeholder
    log_not_found "Bumble API access not available without token"
    echo "Bumble,$email,NOT IMPLEMENTED" >> results/superb-metadata.csv
  done
}

# Snapchat (simulated)
check_snapchat() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Snapchat for: $email"
    # Placeholder logic
    log_not_found "Snapchat API not public. Manual check required."
    echo "Snapchat,$email,NOT IMPLEMENTED" >> results/superb-metadata.csv
  done
}

# Run checks
check_tinder
check_bumble
check_snapchat

echo -e "\n✅ This drop executed. More sites coming in next drop..."

#!/bin/bash

# === Next Drop 2: Facebook, Instagram, WhatsApp, Telegram, Seeking ===

EMAILS=("$@")

log_found() {
  echo -e "\033[1;32m✅ FOUND\033[0m - $1"
}
log_not_found() {
  echo -e "\033[1;31m❌ NOT FOUND\033[0m - $1"
}

# Facebook lookup via login page redirect behavior
check_facebook() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Facebook for: $email"
    RESPONSE=$(curl -s -X POST "https://www.facebook.com/login/identify/"       -H "Content-Type: application/x-www-form-urlencoded"       -d "email=$email&did_submit=Search")

    if [[ "$RESPONSE" == *"We found"* || "$RESPONSE" == *"profile picture"* ]]; then
      log_found "Facebook account exists for $email"
      echo "Facebook,$email,FOUND" >> results/superb-metadata.csv
    else
      log_not_found "Facebook account not found for $email"
      echo "Facebook,$email,NOT FOUND" >> results/superb-metadata.csv
    fi
  done
}

# Instagram lookup
check_instagram() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Instagram for: $email"
    RESPONSE=$(curl -s -X POST "https://www.instagram.com/accounts/account_recovery_send_ajax/"       -H "Content-Type: application/x-www-form-urlencoded"       -H "X-CSRFToken: missing"       -d "email_or_username=$email")

    if [[ "$RESPONSE" == *"status"* && "$RESPONSE" == *"ok"* ]]; then
      log_found "Instagram account may exist for $email"
      echo "Instagram,$email,FOUND" >> results/superb-metadata.csv
    else
      log_not_found "Instagram account not found for $email"
      echo "Instagram,$email,NOT FOUND" >> results/superb-metadata.csv
    fi
  done
}

# WhatsApp (check via wa.me redirect pattern)
check_whatsapp() {
  for email in "${EMAILS[@]}"; do
    echo "[*] WhatsApp check requires phone, not email: $email"
    echo "WhatsApp,$email,NEEDS PHONE" >> results/superb-metadata.csv
  done
}

# Telegram placeholder
check_telegram() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Telegram requires phone for lookup: $email"
    echo "Telegram,$email,NEEDS PHONE" >> results/superb-metadata.csv
  done
}

# Seeking (simulate forgot password)
check_seeking() {
  for email in "${EMAILS[@]}"; do
    echo "[*] Checking Seeking for: $email"
    RESPONSE=$(curl -s -X POST "https://www.seeking.com/password/forgot"       -H "Content-Type: application/json"       -d '{"email":"'"$email"'"}')

    if [[ "$RESPONSE" == *"Check your email"* ]]; then
      log_found "Seeking account exists for $email"
      echo "Seeking,$email,FOUND" >> results/superb-metadata.csv
    else
      log_not_found "Seeking account not found for $email"
      echo "Seeking,$email,NOT FOUND" >> results/superb-metadata.csv
    fi
  done
}

check_facebook
check_instagram
check_whatsapp
check_telegram
check_seeking

echo -e "\n✅ Next Drop 2 executed. More sites coming in next drop..."
